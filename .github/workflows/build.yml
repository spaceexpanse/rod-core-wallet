name: Build CI
  
on:
  push:
#    branches: [ build,06 ]
#  pull_request:
#    branches: [ $default-branch ]
    branches:
#     - master
#     - /^v\d+\.\d+(\.\d+)?(-\S*)?$/
#     - /^travis.*$/
      - 0.6
    tags:
#     - v*
     - build
    pull_request:
     branches:
     - dev

jobs:
  build_linux64:

    runs-on: ubuntu-18.04
    env:
      APT_BASE: ccache
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_SIZE: 500M
      CCACHE_COMPRESS: 1
      PARAMS_DIR: ${{ github.workspace }}/.xaya-params
    defaults:
      run:
        shell: bash
        
    steps:
    - run: echo "NOW=$(date +'%Y%m%d-%H%M')" >> $GITHUB_ENV
    #- run: echo $NOW
    - uses: actions/cache@v2
      with:
        path: |
          .ccache
          .xaya-params
        key: x86_64-unknown-linux-gnu-ccache-${{ env.NOW }} 
        restore-keys: |
            x86_64-unknown-linux-gnu-ccache-
    - run: |
        sudo apt-get update
        sudo apt-get upgrade
        sudo apt-get install --no-install-recommends --no-upgrade -qq "$APT_BASE" build-essential libtool autotools-dev automake pkg-config libssl-dev libevent-dev bsdmainutils python3 libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev
        sudo apt-get install software-properties-common
        sudo apt-add-repository "ppa:ondrej/php" -y
        sudo apt-add-repository "ppa:bitcoin/bitcoin" -y
        sudo apt-add-repository "ppa:deadsnakes/ppa" -y
        sudo apt-get update
        sudo apt-get install --no-install-recommends --no-upgrade -qq "$APT_BASE" git libdb4.8-dev libdb4.8++-dev libminiupnpc-dev libzmq3-dev libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools libprotobuf-dev protobuf-compiler libqrencode-dev libboost-program-options-dev    
    - uses: actions/checkout@v2
      with:
        ref: 1.6
    - uses: actions/cache@v2
      with:
        path: |
          depends/built
          depends/work/build
          depends/sdk-sources
          depends/x86_64-unknown-linux-gnu          
        key: ubuntu-18.04-depends-x86_64-unknown-linux-gnu-${{ env.NOW }} 
        restore-keys: ubuntu-18.04-depends-x86_64-unknown-linux-gnu-
    - run: ./autogen.sh
    - run: ./configure --enable-reduce-exports --enable-zmq --enable-glibc-back-compat --with-gui=qt5 LDFLAGS=-static-libstdc++ CPPFLAGS=-DDEBUG_LOCKORDER
    - run: |
        make -j2
        sudo make install 
    - name: Build project # This would actually build your project, using zip for an example artifact
      run: |
        ls -lh
        mkdir $GITHUB_WORKSPACE/deploy
        cp $GITHUB_WORKSPACE/src/cryptocrowd-cli $GITHUB_WORKSPACE/src/cryptocrowd-tx $GITHUB_WORKSPACE/src/cryptocrowdd $GITHUB_WORKSPACE/src/qt/cryptocrowd-qt $GITHUB_WORKSPACE/src/cryptocrowd-wallet $GITHUB_WORKSPACE/src/cryptocrowd-hash $GITHUB_WORKSPACE/deploy 
        strip $GITHUB_WORKSPACE/deploy/*
        zip --junk-paths xaya-bin-x86_64-unknown-linux-gnu deploy/*
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v.${{ github.ref_name }}.${{ github.run_number }}
        release_name: Xaya Core ${{ github.ref_name }} ${{ github.run_number }}
        draft: true
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./xaya-bin-x86_64-unknown-linux-gnu.zip
        asset_name: xaya-bin-x86_64-unknown-linux-gnu.zip
        asset_content_type: application/zip

  build_win64:

    runs-on: ubuntu-18.04
    env:
      APT_BASE: ccache
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_SIZE: 500M
      CCACHE_COMPRESS: 1
      PARAMS_DIR: ${{ github.workspace }}/.xaya-params
    defaults:
      run:
        shell: bash

    steps:
    - run: echo "NOW=$(date +'%Y%m%d-%H%M')" >> $GITHUB_ENV
    - run: |
        sudo apt-get update
        sudo apt-get upgrade
        sudo apt-get install build-essential libtool autotools-dev automake pkg-config libssl-dev libevent-dev bsdmainutils python3 libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev
        sudo apt-get install software-properties-common
        sudo apt-add-repository "ppa:ondrej/php" -y
        #sudo apt-add-repository "ppa:bitcoin/bitcoin" -y
        sudo apt-add-repository "ppa:deadsnakes/ppa" -y
        sudo apt-get update
        sudo apt-get install git libdb4.8-dev libdb4.8++-dev libminiupnpc-dev libzmq3-dev libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools libprotobuf-dev protobuf-compiler libqrencode-dev libboost-program-options-dev g++-mingw-w64-x86-64 nsis    
    - uses: actions/checkout@v2
      with:
        ref: 1.6
    - uses: actions/cache@v2
      with:
        path: |
          depends/built
          depends/sdk-sources
          depends/work/build
          depends/x86_64-w64-mingw32          
        key: ubuntu-18.04-depends-x86_64-w64-mingw32-${{ env.NOW }}
        restore-keys: ubuntu-18.04-depends-x86_64-w64-mingw32-
    - run: |
        export LC_ALL=C.UTF-8
        unset CC CXX DISPLAY                 
        PATH=$(echo "$PATH" | sed -e 's/:\/mnt.*//g') # strip out problematic Windows %PATH% imported var
    - run: echo 1 | sudo update-alternatives --config x86_64-w64-mingw32-g++            
    - run: sudo bash -c "echo 0 > /proc/sys/fs/binfmt_misc/status" # Disable WSL support for Win32 applications.
    - run: make -j2 -C depends HOST=x86_64-w64-mingw32
      #working-directory: depends
    - run: ./autogen.sh
    - run: CONFIG_SITE=$PWD/depends/x86_64-w64-mingw32/share/config.site ./configure --prefix=/ --with-gui=qt5 LDFLAGS=-Wa,-mbig-obj
    - run: |
        make -j2
        make deploy 
    - run: sudo bash -c "echo 1 > /proc/sys/fs/binfmt_misc/status" # Enable WSL support for Win32 applications. 
    #- run: ls -lh 
 
